% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Mainfunction.R
\name{hier.functional}
\alias{hier.functional}
\title{Decomposition of functional diversity}
\usage{
hier.functional(
  data,
  mat,
  dis,
  q = seq(0, 2, 0.2),
  FDtype = "tau_values",
  FDtau = NULL,
  weight = "size",
  nboot = 20,
  conf = 0.95,
  type = "mle",
  datatype = "abundance",
  decomposition = "relative"
)
}
\arguments{
\item{data}{\code{data.frames}}

\item{mat}{hierarchical structure of data.}

\item{dis}{species pairwise distance matrix for all species in the pooled assemblage.}

\item{q}{a numerical vector specifying the diversity orders. Default is \code{seq(0, 2, 0.2)}.}

\item{FDtype}{select FD type: \code{(FDtype = "tau_values")} for FD under specified threshold values, or \code{(FDtype = "AUC")} (area under the curve of tau-profile) for an overall FD which integrates all threshold values between zero and one. Default is "tau_values".}

\item{FDtau}{a numerical vector between 0 and 1 specifying tau values (threshold levels).If NULL (default), then threshold is set to be the mean distance between any two individuals randomly selected from the pooled assemblage (i.e., quadratic entropy).}

\item{weight}{weight for relative decomposition.}

\item{nboot}{a positive integer specifying the number of bootstrap replications when assessing
sampling uncertainty and constructing confidence intervals. Bootstrap replications are generally time consuming. Enter 0 to skip the bootstrap procedures. Default is \code{20}.}

\item{conf}{a positive number < 1 specifying the level of confidence interval. Default is \code{0.95}.}

\item{type}{estimate type: estimate \code{(type = "est")}, empirical estimate \code{(type = "mle")}.Default is \code{"mle"}.}

\item{decomposition}{Relative decomposition: \code{(decomposition = "relative")}, Absolute decomposition: \code{(decomposition = "absolute")}.}
}
\description{
Decomposition of functional diversity
}
\examples{
## Functional diversity
data(macro)
data(macro_mat)
data(macro_dis)
output3 = hier.functional(data = macro, mat = macro_mat, dis = macro_dis, q = seq(0, 2, 0.2))
output3
}
